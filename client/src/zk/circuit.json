{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"4334070888184939024","abi":{"parameters":[{"name":"commitment","type":{"kind":"field"},"visibility":"public"},{"name":"min_age","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"age","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"6703277390738867884":{"error_kind":"string","string":"Commitment mismatch"},"11234473334724620006":{"error_kind":"string","string":"Age check failed"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9WYvY7TQBCA187GiZ0LF929yK5/YrtLcVfAO1A4F1uiQQjR0N170FHzHLwAJaIEUdHTILJkx54MmzvpPCvdjWTNenb9zexkPLYTiIMs7GEk2B8Tq80xJ7bQ2rAEVm+sztQ6z9sybXWmG5XW26pQebFdV7rSRVXs0irL2iqvynpbl6rWedbqrqizTh1EIpYaKT7jnD48zpQaTGwX+0OiWE2u/6D8w1ii8dSO4bpof8zsbxRbO8yF4rRsePKt78q3Gic6En7qopfQQzKANbbYODcvxVBg9+VgbNwBYz5DLpZ2FwAXG+c1sfpfg8Wd1BhoJ5VPJPkPjavtjCidMO5x4akouJ8WCeNvEYj/u3poayt07EEQe2T1p8/f319/iV6iqb5gf/z6+vH3t58f6PUvrI6JHWp7w7THGHG5+ZXK17E4Fub4sxgxPfBT4Es/fDWznKvbY74gfidkHb3GyFIMb5R0Dczh+ry2c6Y/PhPD+NyOY8LzURs4Ju7cXjriB1/wXLgie8W55+vr5dZVR3z8tK/TqRf+uo8/8sOvgT/zw2+BP/fDz4Efe+FnDfATP/H39+LCD78A/pkf/g3wl1745Q76J/RJ8CHE0DvOkZ2vj2kdEH9CHPcpQfwnJFbud4aA+IN4aH6g10LuVo5YV4452oNXDj8rhx8XSzKypoysiJE1Y2TNGVmcuY8faVwJI4uzJhaMrDNG1mOtL3huuN4DjWysViMlILHjWF290+Qe+s6bt69evxNEMChAAcN5SOYkSgJeNznBE/fwAwfLiClAuGnl7bGfjbWrEVJWh2QamVj+VAz7wCLRPF7/3J7jmxj0mL/Hu7LRXdZ0TdHsdvlNc0H4RuiHiED5wvFwf8yCTw/8/mMWS4LGCzIHOZCO64IT5yHRd62ldmxbOuaAeWk1jhf28RdCNL1hzxkAAA==","debug_symbols":"tZXNbqtADIXfhTULPLbnJ69SVRFJaIWESESTK11FvPudycnQshh0FakbDn/nw/YYz706dYfb574fP85f1e7tXh2mfhj6z/1wPrbX/jzGu/eqSQey1Y7qihzEQ8JDTAMhiIEwRCAKAcWAYkAxoDAoDAqDwqAwKAwKg8KgMCgMioAioAgoAoqAIqAIKAKKgCKgKCgKioKioCgoCoqCoqAoKAqKBcWCYkGxoNhIMVEUEilmnusqF35/nbou1f3HSsT1ubRTN16r3Xgbhrr60w63x0tfl3Z86LWd4tOmrrrxFDUCP/qhS2dz/e1uylYf6GkOhhe7Mf/rd+KefuebF/ys9ulnK4tf1/Hzhp9N9osuflp/X8p+akwuADVcJGxlYHyOwLlSBnbD7/LyCX9XwKz9ruw3TPwEGDa2RPAbNSCfF4FME16JwUlOwjgtZkEbZSQXcieRp2IaRGVEsLkQwb0EoGZJgxofXkojcA6CghSj2CAI5Y4Wo6V+Iv29X1o4N7SoLQWw4dfll1RZ+9/jVXvsp/V2k8ZkrBlDBJKGbWzKNGxjW6RhG4PykAChNG39nAKZ+vYwdImWvncbjxkeL69/L/lJ3u0u0/nYnW5TlwL5seXF45v1teP3OQX7Dw==","file_map":{"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"22":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n","path":"std/lib.nr"},"50":{"source":"use dep::std::hash::poseidon2;\n\nfn main(\n    commitment: pub Field, // public input (commitment)\n    min_age: pub u8,       // public input (minimum age)\n    age: u8,               // private input (actual age)\n    nonce: Field           // private input (salt, random value)\n) {\n    // recompute commitment hash\n    let hash = poseidon2::Poseidon2::hash([age.into(), nonce],2);\n    // commitment must match\n    println(hash);\n    assert(commitment == hash, \"Commitment mismatch\");\n    // age condition must be satisfied\n    assert(age >= min_age, \"Age check failed\");\n}\n","path":"/Users/yongho/Desktop/noir/zk_age_verification/circuit/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained","directive_integer_quotient"]}